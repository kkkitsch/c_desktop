

final关键字
final是一个关键字，可以用于修饰类，成员变量，成员方法。

修饰类：public final class String implements java.io.Serializable, Comparable<String>, CharSequence {

特点：
它修饰的类不能被继承。
它修饰的成员变量是一个常量，final修饰的常量定义一般都有书写规范,被final修饰的常量名称,所有字母都大写。
它修饰的成员方法是不能被子类重写的。


final修饰成员变量,必须初始化,初始化有两种
显示初始化；
构造方法初始化。
但是不能两个一起初始化

final和private的区别：
final修饰的类可以访问；
private不可以修饰外部类，但可以修饰内部类（其实把外部类私有化是没有意义的）。
final修饰的方法不可以被子类重写；
private修饰的方法表面上看是可以被子类重写的，其实不可以，子类是看不到父类的私有方法的。
final修饰的变量只能在显示初始化或者构造函数初始化的时候赋值一次，以后不允许更改；
private修饰的变量，也不允许直接被子类或一个包中的其它类访问或修改，但是他可以通过set和get方法对其改值和取值。















static





面向对象的特征





接口和抽象类
抽象（abstract）
抽象就是从多个事物中将共性的，本质的内容抽象出来。
抽象类：
Java中可以定义没有方法体的方法，该方法的具体实现由子类完成，该方法称为抽象方法，包含抽象方法的类就是抽象类。
由来：
多个对象都具备相同的功能，但是功能具体内容有所不同，那么在抽取过程中，只抽取了功能定义，并未抽取功能主体，那
么只有功能声明，没有功能主体的方法称为抽象方法。

抽象类特点：
抽象方法一定在抽象类中；
抽象方法和抽象类都必须被abstract关键字修饰；
抽象类不可以用new创建对象，因为调用抽象方法没意义；
抽象类中的抽象方法要被使用，必须由子类复写其所有的抽象方法后，建立子类对象调用； 如果子类只覆盖了部分的抽象方法，那么该子类还是一个抽象类；
抽象类中可以有抽象方法，也可以有非抽象方法，抽象方法用于子类实例化；
如果一个类是抽象类，那么，继承它的子类，要么是抽象类，要么重写所有抽象方法。
特殊：抽象类中可以不定义抽象方法，这样做仅仅是不让该类建立对象。
抽象类的成员特点：
成员变量：可以是变量，也可以是常量；
构造方法：有构造方法；
成员方法：可以是抽象方法，也可以是非抽象方法。
abstract class 葵花宝典 {
    public abstract void 自宫();
}
​
class 岳不群 extends 葵花宝典 {
    public void 自宫(){
        System.out.println("剪刀");
    }
}
​
class 林平之 extends 葵花宝典{
    public void 自宫(){
        System.out.println("指甲刀");
    }
}
class AbstractTest  {
    public static void main(String[] args) {
        岳不群 岳 = new 岳不群();
        岳.自宫();
​
        林平之 林 = new 林平之();
        林.自宫();
    }
}
抽象类注意事项：

抽象类不能被实例化，为什么还有构造函数？
只要是class定义的类里面就肯定有构造函数。抽象类中的函数是给子类实例化的。

一个类没有抽象方法，为什么定义为抽象类?
不想被继承，还不想被实例化。

抽象关键字abstract不可以和哪些关键字共存？
final：如果方法被抽象，就需要被覆盖，而final是不可以被覆盖，所以冲突。
private：如果函数被私有了，子类无法直接访问，怎么覆盖呢？
static：不需要对象，类名就可以调用抽象方法。而调用抽象方法没有意义。






接口（interface）是抽象方法和常量值的集合。从本质上讲，接口是一种特殊的抽象类，这种抽象类只包含常量和方法的定义，而没有变量和方法的实现。

特点：
接口不能被实例化。
一个类如果实现了接口，要么是抽象类，要么实现接口中的所有方法。
接口的成员特点：
接口中的成员修饰符是固定的！

成员常量：public static final，接口里定义的变量是全局常量，而且修饰符只能是这三个关键字，都可以省略，常量名要大写。
成员方法：public abstract，接口里定义的方法都是抽象的，两个修饰符关键字可省略。
推荐：永远手动给出修饰符。
继承与实现的区别：

接口与接口之间是继承关系：
一个接口可以继承另一个接口，并添加新的属性和抽象方法，并且接口可以多继承。（(interface) extends (interface1,interface2…)）

抽象类和接口的区别：
成员变量
抽象类能有变量也可以有常量
接口只能有常量
成员方法
抽象类可以有非抽象的方法,也可以有抽象的方法
接口只能有抽象的方法
构造方法
-抽象类有构造方法
-接口没有构造方法

接口的思想特点：
接口是对外暴露的规则；
接口是程序的功能扩展；
接口的出现降低耦合性；(实现了模块化开发,定义好规则,每个人实现自己的模块,大大提高了开发效率)
接口可以用来多实现；
多个无关的类可以实现同一个接口；
一个类可以实现多个相互直接没有关系的接口；
与继承关系类似，接口与实现类之间存在多态性。
//运动员和教练的案例（下图是思路分析）
​
/*
    篮球运动员和教练
    乒乓球运动员和教练
    现在篮球运动员和教练要出国访问,需要学习英语
    请根据你所学的知识,分析出来哪些是类,哪些是抽象类,哪些是接口
*/
interface SpeakEnglish {
    public abstract void speak();
}
​
interface GoAboard{
    public abstract void aboard();
}
​
abstract class Person {
    private String name;
    private int age;
​
    public Person(){}
​
    public Person(String name,int age){
        this.name = name;
        this.age = age;
    }
​
    public void setName(String name){
        this.name = name;
    }
    public String getName(){
        return name;
    }
​
    public void setAge(int age){
        this.age = age;
    }
    public int getAge(){
        return age;
    }
​
    //吃饭
    public abstract void eat();
    //睡觉
    public void sleep(){
        System.out.println("Zzz...");
    }
}
//运动员
abstract class Player extends Person {
    public abstract void study();
}
//教练
abstract class Coach extends Person {
    public abstract void teach();
}
​
//篮球运动员
class BasketballPlayer extends Player implements SpeakEnglish,GoAboard{
    public void eat(){
        System.out.println(getAge() + "岁的" + getName() + "吃鸡腿");
    }
​
    public void study(){
        System.out.println(getAge() + "岁的" + getName() + "学扣篮");
    }
​
    public void speak(){
        System.out.println(getAge() + "岁的" + getName() + " Say Hello World");
    }
​
    public void aboard(){
        System.out.println(getAge() + "岁的" + getName() + " Go Aboard");
    }
}
//乒乓运动员
class PingPangPlayer extends Player{
    public void eat(){
        System.out.println(getAge() + "岁的" + getName() + "吃鸡蛋");
    }
​
    public void study(){
        System.out.println(getAge() + "岁的" + getName() + "学扣球");
    }
}
//篮球教练
class BasketballCoach extends Coach implements SpeakEnglish {
    public void eat(){
        System.out.println(getAge() + "岁的" + getName() + "啃鸡爪");
    }
​
    public void teach(){
        System.out.println(getAge() + "岁的" + getName() + "教扣篮");
    }
​
    public void speak(){
        System.out.println(getAge() + "岁的" + getName() + " Say Hello Java");
    }
​
    public void aboard(){
        System.out.println(getAge() + "岁的" + getName() + " Go Aboard");
    }
}
//乒乓球教练
class PingPangCoach extends Coach{
    public void eat(){
        System.out.println(getAge() + "岁的" + getName() + "吃鸡蛋皮");
    }
​
    public void teach(){
        System.out.println(getAge() + "岁的" + getName() + "教扣球");
    }
}
class PlayerAndCoach {
    public static void main(String[] args) {
        //篮球运动员
        BasketballPlayer bp = new BasketballPlayer();
        bp.setName("郭艾伦");
        bp.setAge(33);
        bp.eat();
        bp.sleep();
        bp.study();
        bp.speak();
        bp.aboard();
        System.out.println("***********************");
        //篮球教练
        BasketballCoach bc = new BasketballCoach();
        bc.setName("波波维奇");
        bc.setAge(65);
        bc.eat();
        bc.sleep();
        bc.teach();
        bc.speak();
        bc.aboard();
        System.out.println("***********************");
        //多态
        Person p = new BasketballPlayer();
        p.setName("Kobe Bryant");
        p.setAge(33);
        p.eat();
        p.sleep();
        //p.study();
        //p.speak();
​
        BasketballPlayer bp2 = (BasketballPlayer)p;
        bp2.study();
        bp2.speak();
        bp2.aboard();
        System.out.println("***********************");
    }
}





